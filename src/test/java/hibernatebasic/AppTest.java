/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hibernatebasic;

import hibernatebasic.model.Course;
import hibernatebasic.model.Professor;
import org.junit.Before;
import org.junit.Test;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import static org.junit.Assert.assertTrue;

public class AppTest {
    private final static String UNIT_NAME = "SimpleUnit";
    private static EntityManagerFactory EM_FACTORY;

    @Before
    public void init() {
        EM_FACTORY = Persistence.createEntityManagerFactory(UNIT_NAME);
    }

    @Test
    public void shouldOpenEmFactory() {
        assertTrue(EM_FACTORY.isOpen());
    }

    @Test
    public void shouldPersistEntity() {
        EntityManager em = EM_FACTORY.createEntityManager();
        em.getTransaction().begin();
        Professor entity = new Professor("John", "Doe");
        em.persist(entity);
        em.getTransaction().commit();
        em.close();
    }

    @Test
    public void lifecycleTest() {
        // 1. New Entity instance
        Professor entity = new Professor("John", "Doe");
        // 2. Get access to the persistence context
        EntityManager em = EM_FACTORY.createEntityManager();
        // 3. Persist the entity instance
        em.persist(entity);
        // 4. Commit transaction
        em.getTransaction().begin();
        em.getTransaction().commit();
        // 5. Close EntityManager = End session with Context
        em.close();
        // 6. New session
        em = EM_FACTORY.createEntityManager();
        // Get Lazy Proxy
        Professor proxy = em.getReference(Professor.class, 1L);
    }

    @Test
    public void shouldPersistProfessorCourse() {
        EntityManager em = EM_FACTORY.createEntityManager();
        em.getTransaction().begin();
        Professor professor = new Professor("John", "Doe");
        Course course = new Course("Math");
        course.setProfessor(professor);
        em.persist(professor);
        em.persist(course);
        em.getTransaction().commit();
        em.close();
    }
}
